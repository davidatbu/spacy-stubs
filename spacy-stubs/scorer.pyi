from .errors import Errors as Errors
from .gold import GoldParse as GoldParse, tags_to_entities as tags_to_entities
from typing import Any, Optional

class PRFScore:
    tp: int = ...
    fp: int = ...
    fn: int = ...
    def __init__(self) -> None: ...
    def score_set(self, cand: Any, gold: Any) -> None: ...
    @property
    def precision(self): ...
    @property
    def recall(self): ...
    @property
    def fscore(self): ...

class ROCAUCScore:
    golds: Any = ...
    cands: Any = ...
    saved_score: float = ...
    saved_score_at_len: int = ...
    def __init__(self) -> None: ...
    def score_set(self, cand: Any, gold: Any) -> None: ...
    @property
    def score(self): ...

class Scorer:
    tokens: Any = ...
    sbd: Any = ...
    unlabelled: Any = ...
    labelled: Any = ...
    labelled_per_dep: Any = ...
    tags: Any = ...
    ner: Any = ...
    ner_per_ents: Any = ...
    eval_punct: Any = ...
    textcat: Any = ...
    textcat_per_cat: Any = ...
    textcat_positive_label: Any = ...
    textcat_multilabel: bool = ...
    def __init__(self, eval_punct: bool = ..., pipeline: Optional[Any] = ...) -> None: ...
    @property
    def tags_acc(self): ...
    @property
    def token_acc(self): ...
    @property
    def uas(self): ...
    @property
    def las(self): ...
    @property
    def las_per_type(self): ...
    @property
    def ents_p(self): ...
    @property
    def ents_r(self): ...
    @property
    def ents_f(self): ...
    @property
    def ents_per_type(self): ...
    @property
    def textcat_score(self): ...
    @property
    def textcats_per_cat(self): ...
    @property
    def scores(self): ...
    def score(self, doc: Any, gold: Any, verbose: bool = ..., punct_labels: Any = ...) -> None: ...
