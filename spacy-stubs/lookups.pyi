from .errors import Errors as Errors
from .strings import get_string_id as get_string_id
from .util import SimpleFrozenDict as SimpleFrozenDict, ensure_path as ensure_path
from collections import OrderedDict
from typing import Any, Optional

UNSET: Any

class Lookups:
    def __init__(self) -> None: ...
    def __contains__(self, name: Any): ...
    def __len__(self): ...
    @property
    def tables(self): ...
    def add_table(self, name: Any, data: Any = ...): ...
    def get_table(self, name: Any, default: Any = ...): ...
    def remove_table(self, name: Any): ...
    def has_table(self, name: Any): ...
    def to_bytes(self, **kwargs: Any): ...
    def from_bytes(self, bytes_data: Any, **kwargs: Any): ...
    def to_disk(self, path: Any, **kwargs: Any) -> None: ...
    def from_disk(self, path: Any, **kwargs: Any): ...

class Table(OrderedDict):
    @classmethod
    def from_dict(cls, data: Any, name: Optional[Any] = ...): ...
    name: Any = ...
    default_size: float = ...
    bloom: Any = ...
    def __init__(self, name: Optional[Any] = ..., data: Optional[Any] = ...) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def set(self, key: Any, value: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __contains__(self, key: Any): ...
    def to_bytes(self): ...
    def from_bytes(self, bytes_data: Any): ...
