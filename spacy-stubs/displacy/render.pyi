from ..errors import Errors as Errors
from ..util import escape_html as escape_html, minify_html as minify_html, registry as registry
from .templates import TPL_DEP_ARCS as TPL_DEP_ARCS, TPL_DEP_SVG as TPL_DEP_SVG, TPL_DEP_WORDS as TPL_DEP_WORDS, TPL_DEP_WORDS_LEMMA as TPL_DEP_WORDS_LEMMA, TPL_ENT as TPL_ENT, TPL_ENTS as TPL_ENTS, TPL_ENT_RTL as TPL_ENT_RTL, TPL_FIGURE as TPL_FIGURE, TPL_PAGE as TPL_PAGE, TPL_TITLE as TPL_TITLE
from typing import Any

DEFAULT_LANG: str
DEFAULT_DIR: str

class DependencyRenderer:
    style: str = ...
    compact: Any = ...
    word_spacing: Any = ...
    arrow_spacing: Any = ...
    arrow_width: Any = ...
    arrow_stroke: Any = ...
    distance: Any = ...
    offset_x: Any = ...
    color: Any = ...
    bg: Any = ...
    font: Any = ...
    direction: Any = ...
    lang: Any = ...
    def __init__(self, options: Any = ...) -> None: ...
    def render(self, parsed: Any, page: bool = ..., minify: bool = ...): ...
    levels: Any = ...
    highest_level: Any = ...
    offset_y: Any = ...
    width: Any = ...
    height: Any = ...
    id: Any = ...
    def render_svg(self, render_id: Any, words: Any, arcs: Any): ...
    def render_word(self, text: Any, tag: Any, lemma: Any, i: Any): ...
    def render_arrow(self, label: Any, start: Any, end: Any, direction: Any, i: Any): ...
    def get_arc(self, x_start: Any, y: Any, y_curve: Any, x_end: Any): ...
    def get_arrowhead(self, direction: Any, x: Any, y: Any, end: Any): ...
    def get_levels(self, arcs: Any): ...

class EntityRenderer:
    style: str = ...
    default_color: str = ...
    colors: Any = ...
    ents: Any = ...
    direction: Any = ...
    lang: Any = ...
    ent_template: Any = ...
    def __init__(self, options: Any = ...) -> None: ...
    def render(self, parsed: Any, page: bool = ..., minify: bool = ...): ...
    def render_ents(self, text: Any, spans: Any, title: Any): ...
